<?php

/**
 * @file
 * Entity Class Formatter module.
 */

use Drupal\Component\Utility\Html;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\FieldableEntityInterface;
use Drupal\Core\Field\EntityReferenceFieldItemListInterface;

/**
 * Implements hook_entity_view_alter().
 */
function entity_class_formatter_entity_view_alter(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display) {

  // Skip entities which are not holding fields.
  if (!($entity instanceof FieldableEntityInterface)) {
    return;
  }

  // Process all fields.
  foreach ($display->getComponents() as $name => $component) {

    // Only if entity_class_formatter is used.
    if (isset($component['type']) && $component['type'] === 'entity_class_formatter') {
      $field = $entity->get($name);
      $field_definition = $field->getFieldDefinition();

      $prefix = '';
      // Get prefix to be attached before.
      if (!empty($component['settings']['prefix'])) {
        $prefix = $component['settings']['prefix'];
      }
      $suffix = '';
      // Get suffix to be attached after.
      if (!empty($component['settings']['suffix'])) {
        $suffix = $component['settings']['suffix'];
      }

      // Only for entity reference field type.
      if ($field instanceof EntityReferenceFieldItemListInterface) {
        foreach ($field->referencedEntities() as $referenced_entity) {

          // Fill title as a class if not empty.
          $title = $referenced_entity->label();
          if (!empty($title)) {
            $build['#attributes']['class'][] = Html::getClass($prefix . $title . $suffix);
          }
        }
      }

      // Only for boolean field type.
      elseif ($field_definition->getType() === 'boolean') {

        // Fill configured label as a class based on value.
        if (filter_var($field->value, FILTER_VALIDATE_BOOLEAN)) {
          $label = $field_definition->getSetting('on_label');
        }
        else {
          $label = $field_definition->getSetting('off_label');
        }
        $build['#attributes']['class'][] = Html::getClass($prefix . $label . $suffix);
      }

      // For other simple fields.
      else {
        foreach ($field->getValue() as $item) {

          // Fill value as a class if not empty.
          if (!empty($item['value'])) {

            // Split value into multiple classes when spaces are used.
            foreach (explode(' ', $item['value']) as $class) {
              $build['#attributes']['class'][] = Html::getClass($prefix . $class . $suffix);
            }
          }
        }
      }
    }
  }
}
